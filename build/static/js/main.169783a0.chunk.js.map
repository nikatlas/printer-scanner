{"version":3,"sources":["components/Search/index.js","pages/Home/index.js","pages/index.js","pages/Printer/index.js","pages/Toner/index.js","App.js","serviceWorker.js","index.js"],"names":["strapi","StrapiClient","useStyles","makeStyles","theme","root","margin","spacing","props","React","useState","term","setTerm","brand","setBrand","brandOptions","setBrandOptions","termOptions","setTermOptions","classes","lookupBrand","b","a","get","brands","lookup","code","model_contains","printers","console","log","Grid","container","direction","className","Autocomplete","id","options","getOptionLabel","option","name","style","width","onChange","e","v","renderInput","params","TextField","label","placeholder","variant","value","target","model","Button","onClick","onSearch","color","startIcon","Home","justify","alignItems","Box","src","align","Printer","Toner","App","Container","Card","path","exact","component","Pages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.169783a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Button, Grid, TextField} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport StrapiClient from 'strapi-client';\r\nconst BASE_URL = \"https://printers.tonersales.eu\";\r\nconst strapi = new StrapiClient(BASE_URL);\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default (function(props) {\r\n\tconst [term, setTerm] = React.useState('');\r\n\tconst [brand, setBrand] = React.useState('');\r\n\tconst [brandOptions, setBrandOptions] = React.useState([]);\r\n\tconst [termOptions, setTermOptions] = React.useState([]);\r\n\tconst classes = useStyles();\r\n\r\n\tconst lookupBrand = async function(b) {\r\n\t\tlet brands = await strapi.get(\"brands\", {'name_contains': b});\r\n\t\tsetBrand(b);\r\n\t\tsetBrandOptions(brands);\r\n\t}\r\n\t\r\n\tconst lookup = async function(code) {\r\n\t\tlet printers = await strapi.get(\"printers\", {'brand.name_contains': brand, model_contains: code});\r\n\t\tsetTerm(code);\r\n\t\tsetTermOptions(printers);\r\n\t}\r\n\tconsole.log(brand, term);\r\n\treturn (\r\n\t\t<Grid container direction=\"row\" className = {classes.root}>\r\n      \t\t<Autocomplete\r\n\t\t\t  id=\"brand-term\"\r\n\t\t\t  options={brandOptions}\r\n\t\t\t  getOptionLabel={(option) => option.name}\r\n\t\t\t  style={{ width: 300 }}\r\n\t\t\t  onChange={(e, v) => v && setBrand(v.name) && v}\r\n\t\t\t  renderInput={(params) => <TextField {...params} label=\"Μάρκα Εκτυπωτή\" placeholder=\"HP, Lexmark, Samsung...\" variant=\"outlined\" value={brand} onChange={(v) => lookupBrand(v.target.value)}/>}\r\n\t\t\t/>\r\n\t\t\t<Autocomplete\r\n\t\t\t  id=\"search-term\"\r\n\t\t\t  options={termOptions}\r\n\t\t\t  getOptionLabel={(option) => option.model}\r\n\t\t\t  style={{ width: 400 }}\r\n\t\t\t  onChange={(e, v) => v && setTerm(v.model) && v}\r\n\t\t\t  renderInput={(params) => <TextField {...params} label=\"Κωδικός Εκτυπωτή\" variant=\"outlined\" value={term} onChange={(v) => lookup(v.target.value)}/>}\r\n\t\t\t/>\r\n      \t\t<Button \r\n      \tonClick={() => props.onSearch(brand,term)}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={<SearchIcon/>}>\r\n      \t\t\tΒρες το\r\n      \t\t</Button>\r\n\t\t</Grid>\r\n\t);\r\n});","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Grid, Box} from '@material-ui/core';\r\nimport {SearchBox} from '../../components'; \r\n\r\nimport StrapiClient from 'strapi-client';\r\nconst BASE_URL = \"https://printers.tonersales.eu\";\r\nconst strapi = new StrapiClient(BASE_URL);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     '& img': {\r\n//       margin: theme.spacing(5),\r\n//     },\r\n//   },\r\n// }));\r\n\r\n\r\n\r\nexport default function () {\r\n\tconst lookup = async function(brand, code) {\r\n\t\tlet printers = await strapi.get(\"printers\", {'brand.name_contains': brand, model_contains: code});\r\n\t\tconsole.log(printers);\r\n\t}\r\n\r\n  return (\r\n  \t<div>\r\n\t\t<Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\r\n\t\t\t<Box className=\"logo-container\">\r\n\t\t\t\t<img src={'/logo.png'} />\r\n\t\t\t</Box>\r\n\t\t\t<Box className=\"logo-container\" align='center'>\r\n\t\t\t\t<h1><strong>TONERSALES</strong></h1>\r\n\t\t\t\t<h4>Βρές τα αναλώσιμα του εκτυπωτή σου εύκολα και γρήγορα!</h4><br />\r\n\t\t\t\t<small>Σημείωσε τη μάρκα και το μοντέλο του εκτυπωτή σου</small>  \r\n\t\t\t</Box>\r\n\t\t\t<Box className=\"search-container\">\r\n\t\t\t\t<SearchBox onSearch={(brand, code) => lookup(brand, code)}/>\r\n\t\t\t</Box>\r\n\t\t</Grid>\r\n  \t</div>\r\n  );\r\n}\r\n","import Home from './Home';\r\nimport Printer from './Printer';\r\nimport Toner from './Toner';\r\n\r\nexport default {\r\n\tHome,\r\n\tPrinter,\r\n\tToner\r\n}","import React from 'react';\r\n\r\nexport default function () {\r\n  return (\r\n  \t<div>\r\n  \t\tPrinter\r\n  \t</div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function () {\r\n  return (\r\n  \t<div>\r\n  \t\tToner\r\n  \t</div>\r\n  );\r\n}\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\n\nimport { Grid, Container, Card, Box } from '@material-ui/core';\n\nimport Pages from './pages';\n\nimport { SearchBox } from './components';\n\nimport './App.css';\n\n\n// console.log(\"ALL\", All);\n\n\nfunction App() {\n  return (\n    <Router>\n    \t<div className=\"main-container\">\n    \t\t<Container>\n\t\t    \t<Card>\n\t\t\t\t\t<Route path=\"/\" exact component={Pages.Home}/>\n\t\t\t      \t<Route path=\"/printer/:id/:name\" exact component={Pages.Printer}/>\n\t\t\t      \t<Route path=\"/toner/:id/:name\" exact component={Pages.Toner}/>\n\t\t\t    </Card>\n\t\t    </Container>\n\t    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}