{"version":3,"sources":["components/Search/index.js","pages/Printer/index.js","pages/index.js","pages/Home/index.js","pages/Toner/index.js","App.js","serviceWorker.js","index.js"],"names":["strapi","StrapiClient","useStyles","makeStyles","theme","root","margin","spacing","props","React","useState","term","setTerm","brand","setBrand","undefined","item","setItem","brandOptions","setBrandOptions","termOptions","setTermOptions","classes","lookupBrand","b","a","get","_limit","brands","lookup","code","model_contains","printers","runPost","onFail","res","length","onSearch","Grid","container","direction","className","Autocomplete","autoComplete","autoHighlight","freeSolo","id","options","getOptionLabel","option","name","style","minWidth","onChange","e","v","renderInput","params","TextField","label","placeholder","variant","value","target","model","Button","onClick","color","startIcon","Home","open","setOpen","fullTerm","setFullTerm","justify","alignItems","Box","src","maxWidth","alt","align","history","push","replace","full","ReactGA","event","category","action","openModal","Modal","display","justifyContent","onClose","aria-labelledby","aria-describedby","Card","CardContent","Typography","component","CardActions","href","textDecoration","Printer","match","toners","useEffect","fetchIt","fullname","p","backgroundColor","borderBottom","paddingBottom","minHeight","xs","md","width","image","gutterBottom","description","map","toner","sm","key","CardMedia","height","title","link","Toner","initialize","uid","URLSearchParams","window","location","search","set","userId","pageview","pathname","App","useHistory","listen","Container","path","exact","Pages","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20b08c86.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Button, Grid, TextField} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport StrapiClient from 'strapi-client';\r\nconst BASE_URL = \"https://printers.tonersales.eu\";\r\nconst strapi = new StrapiClient(BASE_URL);\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default (function(props) {\r\n\tconst [term, setTerm] = React.useState('');\r\n\tconst [brand, setBrand] = React.useState('');\r\n\tconst [item, setItem] = React.useState(undefined);\r\n\tconst [brandOptions, setBrandOptions] = React.useState([]);\r\n\tconst [termOptions, setTermOptions] = React.useState([]);\r\n\tconst classes = useStyles();\r\n\r\n\tconst lookupBrand = async function(b) {\r\n\t\tlet brands = await strapi.get(\"brands\", {'name_contains': b, _limit: 7});\r\n\t\tsetBrand(b);\r\n\t\tsetBrandOptions(brands);\r\n\t}\r\n\t\r\n\tconst lookup = async function(code) {\r\n\t\tlet printers = await strapi.get(\"printers\", {'brand.name_contains': brand, model_contains: code, _limit: 7});\r\n\t\tsetTerm(code);\r\n\t\tsetItem(undefined);\r\n\t\tsetTermOptions(printers);\r\n\t}\r\n\r\n\tconst runPost = async function() {\r\n\t\tif(!item) {\r\n\t\t\tif(!term) {\r\n\t\t\t\tprops.onFail(brand, term);\r\n\t\t\t} else {\r\n\t\t\t\tlet res = await strapi.get(\"printers\",  {'brand.name_contains': brand, model_contains: term, _limit: 1})\r\n\t\t\t\tres.length ? props.onSearch(brand, term, res[0]) : props.onFail(brand, term);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tprops.onSearch(brand, term, item);\r\n\t\t}\r\n\t}\r\n\t// console.log(brand, term, item);\r\n\treturn (\r\n\t\t<Grid container direction=\"row\" className = {classes.root}>\r\n      \t\t<Autocomplete\r\n\t\t\tautoComplete\r\n\t\t\tautoHighlight\r\n\t\t\tfreeSolo\r\n\t\t\t  id=\"brand-term\"\r\n\t\t\t  options={brandOptions}\r\n\t\t\t  getOptionLabel={(option) => option.name}\r\n\t\t\t  style={{minWidth: 180}}\r\n\t\t\t  onChange={(e, v) => v && setBrand(v.name)}\r\n\t\t\t  renderInput={(params) => <TextField {...params} label=\"Μάρκα Εκτυπωτή\" placeholder=\"HP, Lexmark, Samsung...\" variant=\"outlined\" value={brand} onChange={(v) => lookupBrand(v.target.value)}/>}\r\n\t\t\t/>\r\n\t\t\t<Autocomplete\r\n\t\t\tautoComplete\r\n\t\t\tautoHighlight\r\n\t\t\tfreeSolo\r\n\t\t\t  id=\"search-term\"\r\n\t\t\t  options={termOptions}\r\n\t\t\t  getOptionLabel={(option) => option.model}\r\n\t\t\t  style={{minWidth: 180}}\r\n\t\t\t  onChange={(e, v) => v && (setTerm(v.model) || setItem(v))}\r\n\t\t\t  renderInput={(params) => <TextField {...params} label=\"Κωδικός Εκτυπωτή\" variant=\"outlined\" value={term} onChange={(v) => lookup(v.target.value)}/>}\r\n\t\t\t/>\r\n      \t\t<Button \r\n\t      \tonClick={() => runPost()}\r\n\t        variant=\"contained\"\r\n\t        color=\"primary\"\r\n\t        startIcon={<SearchIcon/>}>\r\n\t      \t\tΒρες το\r\n      \t\t</Button>\r\n\t\t</Grid>\r\n\t);\r\n});","import React from 'react';\r\nimport { Grid, Button, Box, Card, CardContent, CardMedia, CardActions, Typography } from '@material-ui/core';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport StrapiClient from 'strapi-client';\r\nconst BASE_URL = \"https://printers.tonersales.eu\";\r\nconst strapi = new StrapiClient(BASE_URL);\r\n\r\n\r\n\r\nexport default function (props) {\r\n\tlet id = props.match.params.id || undefined;\r\n\tlet [item, setItem] = React.useState({toners: []});\r\n\r\n\tasync function fetchIt() {\r\n\t    let res = await strapi.get(\"printers\", {id});\r\n\t    setItem(res[0]);\r\n\t}\r\n\tReact.useEffect(() => {\r\n\t\tfetchIt();\r\n\t}, [item.id]);\r\n\t// console.log(item);\r\n\r\n\tlet fullname = (item.brand && item.brand.name) + \" \" + item.model;\r\n\treturn (\r\n\t  \t<Box p={2} style={{backgroundColor: '#f5f5f5'}}>\r\n\t  \t\t<Grid container direction=\"row\" justify=\"space-around\" align=\"center\" style={{borderBottom:'1px solid', paddingBottom:48, minHeight: 310}}>\r\n\t\t  \t\t<Grid item xs={12} md={6}>\r\n\t\t  \t\t\t<Card style={{width: 332}}>\r\n\t\t  \t\t\t\t<Box p={2}>\r\n\t\t  \t\t\t\t\t<img src={item.image} alt={'Image - ' + fullname} style={{ maxWidth : 300 }}/>\r\n\t\t  \t\t\t\t</Box>\r\n\t\t  \t\t\t</Card>\r\n\t\t  \t\t</Grid>\r\n\t\t  \t\t<Grid item xs={12} md={6} align=\"left\">\r\n\t\t  \t\t\t<div>\r\n\t\t  \t\t\t\t<Typography gutterBottom variant=\"h5\">\r\n\t\t  \t\t\t\t\tΕκτυπωτής {fullname}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t  \t\t\t</div>\r\n\t\t  \t\t\t<p>{item.description}</p>\r\n\t\t  \t\t</Grid>\r\n\t\t  \t</Grid>\r\n\t  \t\t<Grid item xs={12} align=\"left\">\r\n\t  \t\t\t<div>\r\n\t  \t\t\t\t<Typography gutterBottom variant=\"h6\" align=\"center\">\r\n\t\t\t\t\t\tΑναλώσιμα για τον εκτυπωτή {fullname}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</div>\r\n\t  \t\t\t<Box xs={12} p={10}>\r\n\t  \t\t\t{item.toners.map((toner) => \r\n\t  \t\t\t\t<Grid item xs={12} sm={6} md={4} key={toner.id}>\r\n\t\t  \t\t\t\t<Card>\r\n\t\t  \t\t\t\t\t<CardMedia\r\n\t\t  \t\t\t\t\t  style={{height: 140}}\r\n\t\t\t\t\t          image={toner.image || ''}\r\n\t\t\t\t\t          title={toner.model}\r\n\t\t\t\t\t        />\r\n\t\t\t\t\t    \t<CardContent style={{minHeight: 60}}>\r\n\t\t\t\t\t        \t<Typography variant=\"h5\" component=\"h2\">\r\n\t\t\t\t\t        \t\t{toner.model}\r\n\t\t\t\t\t        \t</Typography>\r\n\t\t\t\t\t      \t</CardContent>\r\n\t\t\t\t\t      \t<CardActions>\r\n\t\t\t\t\t\t        <a href={toner.link} target=\"_new\" style={{textDecoration:'none'}}>\r\n\t\t\t\t\t\t        \t<Button variant=\"contained\" color=\"primary\">Αγορά</Button>\r\n\t\t\t\t\t\t        </a>\r\n\t\t\t\t\t\t\t</CardActions>\r\n\t\t\t\t\t    </Card>\r\n\t\t\t\t    </Grid>\r\n\t  \t\t\t)}\r\n\t  \t\t\t</Box>\r\n\t  \t\t</Grid>\r\n\t  \t</Box>\r\n  \t);\r\n}\r\n","import Home from './Home';\r\nimport Printer from './Printer';\r\nimport Toner from './Toner';\r\n\r\nexport default {\r\n\tHome,\r\n\tPrinter,\r\n\tToner\r\n}","import React from 'react';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport { Grid, Box, Modal, Typography, Card, CardContent, CardActions, Button } from '@material-ui/core';\r\nimport {SearchBox} from '../../components'; \r\n\r\n\r\nexport default function (props) {\r\n\tlet [open, setOpen] = React.useState(false);\r\n\tlet [fullTerm, setFullTerm] = React.useState('');\r\n\r\n\tconst lookup = function(brand, code, item) {\r\n\t\t// let printers = await strapi.get(\"printers\", {'brand.name_contains': brand, model_contains: code});\r\n\t\tprops.history.push(\"/printer/\"+item.id+\"/\"+item.brand.name + \"-\" + item.model.replace(' ', '-'));\r\n\t}\r\n\r\n\tconst openModal = function(brand, code) {\r\n\t\tlet full = brand + \" \" + code;\r\n\t\tsetOpen(true);\r\n\t\tsetFullTerm(full);\r\n\r\n        ReactGA.event({\r\n\t\t  category: 'Search',\r\n\t\t  action: 'Not found modal',\r\n\t\t  label: full\r\n\t\t});\r\n\t}\r\n\r\n  \treturn (\r\n\t\t<Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\r\n\t\t\t<Box className=\"logo-container\">\r\n\t\t\t\t<img src={'/logo.png'} style={{ maxWidth: 250 }} alt=\"Tonersales - Logo\"/>\r\n\t\t\t</Box>\r\n\t\t\t<Box className=\"logo-container\" align='center'>\r\n\t\t\t\t<h1><strong>TONERSALES</strong></h1>\r\n\t\t\t\t<h4>Βρές τα αναλώσιμα του εκτυπωτή σου εύκολα και γρήγορα!</h4><br />\r\n\t\t\t\t<small>Σημείωσε τη μάρκα και το μοντέλο του εκτυπωτή σου</small>  \r\n\t\t\t</Box>\r\n\t\t\t<Box className=\"search-container\">\r\n\t\t\t\t<SearchBox onSearch={(brand, code, item) => lookup(brand, code, item)} onFail={(brand, code) => openModal(brand, code)}/>\r\n\t\t\t</Box>\r\n\r\n\r\n\r\n\t\t\t<Modal\r\n\t\t\t  open={open}\r\n\t\t\t  style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n\t\t\t  onClose={() => setOpen(false)}\r\n\t\t\t  aria-labelledby=\"Η αναζήτηση απέτυχε\"\r\n\t\t\t  aria-describedby=\"Δεν καταφέραμε να βρούμε τον εκτυπωτή σου\"\r\n\t\t\t>\r\n\t\t\t\t<Card style={{ maxWidth: 600, margin: 'auto' }}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography variant=\"body1\" component=\"h2\">\r\n\t\t\t        \t\tΔεν καταφέραμε να βρούμε τον εκτυπωτή σου στη βάση δεδομένων μας!\r\n\t\t\t        \t\tΜπορείτε να δοκιμάσετε την απλή αναζήτηση\r\n\t\t\t        \t</Typography>\r\n\t\t        \t</CardContent>\r\n\t\t        \t<CardActions>\r\n\t\t        \t\t<a href={'https://tonersales.eu/shop/search?controller=search&orderby=sales&orderway=desc&submit_search=&search_query='+fullTerm} style={{textDecoration: 'none'}}>\r\n\t\t        \t\t\t<Button variant=\"contained\" color=\"secondary\">\r\n\t\t        \t\t\t\tΑπλή αναζήτηση\r\n\t\t        \t\t\t</Button>\r\n\t\t        \t\t</a>\r\n\t\t        \t</CardActions>\r\n\t        \t</Card>\r\n\t\t\t</Modal>\r\n\t\t</Grid>\r\n\t);\r\n}\r\n","import React from 'react';\r\n\r\nexport default function () {\r\n  return (\r\n  \t<div>\r\n  \t\tToner\r\n  \t</div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport {\n  Route,\n  useHistory\n} from \"react-router-dom\";\nimport { Grid, Container, Card } from '@material-ui/core';\nimport Pages from './pages';\nimport './App.css';\n\n// init\nReactGA.initialize('UA-165669873-1', {\n//  debug: true\n});\n// get cuserID from tonersales\nlet uid = new URLSearchParams(window.location.search).get(\"cuserID\");\nif(uid) {\n  ReactGA.set({ userId:  uid });\n}\nReactGA.pageview(window.location.pathname);\n\nfunction App() {\n  const history = useHistory();\n  React.useEffect(() => {\n      return history.listen((location) => {\n          ReactGA.pageview(location.pathname);\n      })\n  },[history])\n\n  return (\n  \t<div className=\"main-container\">\n  \t\t<Container>\n        <Grid item>\n\t\t    \t<Card>\n\t\t\t\t\t    <Route path=\"/\" exact component={Pages.Home}/>\n\t\t\t      \t<Route path=\"/printer/:id/:name\" exact component={Pages.Printer}/>\n\t\t\t      \t<Route path=\"/toner/:id/:name\" exact component={Pages.Toner}/>\n\t\t\t    </Card>\n\t\t    </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<BrowserRouter>\n    \t<App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}